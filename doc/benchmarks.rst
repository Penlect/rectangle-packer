
==========
Benchmarks
==========

This section investigates the performance of
:py:func:`rpack.pack`. The packing quality and time complexity are
studied by packing many randomly generated rectangles.


Packing density
===============

The *packing density* is defined as the fraction of the space filled
by the rectangles in the bounding box. The objective of
:py:func:`rpack.pack` is to obtain a packing of the greatest possible
density.

The boxplot below shows how the packing density is correlated to the
number of rectangles packed. Ten cases were generated, for 10, 20,
..., 100 rectangles.  For each case, rectangles were randomly
generated by picking side lengths uniformly distributed in the
interval [1, 1000].  If you are not familiar with boxplots, have a
look at the `boxplot`_ article at Wikipedia for an introduction.

.. only:: latex

  .. image:: https://storage.googleapis.com/bucket.penlect.com/rpack/2.0.0/img/packing_density_by_n.pdf
     :alt: packing density
     :align: center

.. only:: html

  .. figure:: https://storage.googleapis.com/bucket.penlect.com/rpack/2.0.0/img/packing_density_by_n.svg
     :alt: packing density
     :align: center

The boxplot below shows how the packing density varies by rectangle side
lengths.
	  
.. only:: latex

  .. image:: https://storage.googleapis.com/bucket.penlect.com/rpack/2.0.0/img/packing_density_by_m.pdf
     :alt: packing density
     :align: center

.. only:: html
	  
  .. figure:: https://storage.googleapis.com/bucket.penlect.com/rpack/2.0.0/img/packing_density_by_m.svg
     :alt: packing density
     :align: center

The scatter plot below shows how the minimal bounding box shape is
distributed based on how many rectangles were packed. In all runs,
random rectangles were generated by picking side lengths uniformly
distributed in the interval [1, 1000]. It is interesting to note, that
the minimal bounding box tends to be more extreme (very wide or very
tall) when the number of rectangles increases.
	  
.. only:: latex
	  
  .. image:: https://storage.googleapis.com/bucket.penlect.com/rpack/2.0.0/img/enclosing.pdf
     :alt: enclosing
     :align: center

.. only:: html
	  
  .. figure:: https://storage.googleapis.com/bucket.penlect.com/rpack/2.0.0/img/enclosing.svg
     :alt: enclosing
     :align: center

Example of 100 rectangles, high packing density:

	  
.. only:: latex
	  
  .. image:: https://storage.googleapis.com/bucket.penlect.com/rpack/2.0.0/img/packing_best_100.pdf
     :alt: compute time
     :align: center

.. only:: html
	  
  .. figure:: https://storage.googleapis.com/bucket.penlect.com/rpack/2.0.0/img/packing_best_100.svg
     :alt: compute time
     :align: center

Example of 100 rectangles, lower packing density:
	  
.. only:: latex
	  
  .. image:: https://storage.googleapis.com/bucket.penlect.com/rpack/2.0.0/img/packing_worst_100.pdf
     :alt: compute time
     :align: center

.. only:: html
	  
  .. figure:: https://storage.googleapis.com/bucket.penlect.com/rpack/2.0.0/img/packing_worst_100.svg
     :alt: compute time
     :align: center


Squares test
------------

The squares test packs an increasing number of square rectangles.

See this PDF, `squares.pdf`_, for packed squares 1x1, ..., NxN, for N =
1, ..., 100. A summary is shown in the plot below.

See Richard E. Korf's paper `Optimal Rectangle Packing: Initial
Results`_ for the optimal solutions for all squares up to n=22.
	  
.. only:: latex
	  
  .. image:: https://storage.googleapis.com/bucket.penlect.com/rpack/2.0.0/img/squares_summary.pdf
     :alt: compute time
     :align: center

.. only:: html
	  
  .. image:: https://storage.googleapis.com/bucket.penlect.com/rpack/2.0.0/img/squares_summary.svg
     :alt: compute time
     :align: center

	     
Circumference test
------------------

The circumference test packs an increasing number of rectagins having
the same circumference. For exampe, N = 4, implies the rectangles 4x1,
3x2, 2x3 and 1x4.

See this PDF, `circum.pdf`_, for packed rectangles Nx1, ..., 1xN, for
N = 1, ..., 100. A summary is shown in the plot below.
	  
.. only:: latex
	  
  .. image:: https://storage.googleapis.com/bucket.penlect.com/rpack/2.0.0/img/circum_summary.pdf
     :alt: compute time
     :align: center

.. only:: html
	  
  .. figure:: https://storage.googleapis.com/bucket.penlect.com/rpack/2.0.0/img/circum_summary.svg
     :alt: compute time
     :align: center

Time complexity
===============

In computer science, the time complexity is the computational
complexity that describes the amount of time it takes to run an
algorithm.

This section presents how :py:func:`rpack.pack` performs with
increasing rectangle count and size.

The figure below shows the increased computational cost when the
average rectangle side length is increased.  For each measurement point,
100 random rectangles were generated by picking independent uniformely
distributed side lengths in the interval [1, 1000]. The procedure was
repeated several times and the vertical lines indicates the standard
deviation.
	  
.. only:: latex
	  
  .. image:: https://storage.googleapis.com/bucket.penlect.com/rpack/2.0.0/img/computation_time_by_m.pdf
     :alt: compute time
     :align: center

.. only:: html
	  
  .. figure:: https://storage.googleapis.com/bucket.penlect.com/rpack/2.0.0/img/computation_time_by_m.svg
     :alt: compute time
     :align: center

The figure below shows the increased computational cost when the
number of rectangles are increased.  For each measurement point, a set
of random rectangles were generated by picking independent uniformely
distributed side lengths in the interval [1, 1000]. For these 10
points, a qubic polynomial fits the data well (a quadratic does not).
However, this is not a proof that the average complexety actually is
O(n^3).
	  
.. only:: latex
	  
  .. image:: https://storage.googleapis.com/bucket.penlect.com/rpack/2.0.0/img/computation_time_by_n.pdf
     :alt: compute time
     :align: center

.. only:: html
	  
  .. figure:: https://storage.googleapis.com/bucket.penlect.com/rpack/2.0.0/img/computation_time_by_n.svg
     :alt: compute time
     :align: center
	   

.. _`Optimal Rectangle Packing: Initial Results`: https://www.aaai.org/Papers/ICAPS/2003/ICAPS03-029.pdf
.. _`Optimal Rectangle Packing: An Absolute Placement Approach`: https://arxiv.org/pdf/1402.0557.pdf
.. _boxplot: https://en.wikipedia.org/wiki/Box_plot
.. _squares.pdf: https://storage.googleapis.com/bucket.penlect.com/rpack/2.0.0/img/squares.pdf
.. _circum.pdf: https://storage.googleapis.com/bucket.penlect.com/rpack/2.0.0/img/circum.pdf
